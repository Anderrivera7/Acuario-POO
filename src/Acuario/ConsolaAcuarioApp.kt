package Acuario


class ConsolaAcuarioApp {
    private val acuarios = mutableListOf<Acuario>()

    fun run() {
        while (true) {
            println(
                """
                
                ========== MEN칔 ACUARIO ==========
                1) Crear Acuario rectangular (largo, ancho, alto)
                2) Crear Tanque Torre (di치metro, alto)
                3) Crear Acuario por n칰mero de peces
                4) Listar acuarios (volumen, agua, forma)
                5) Cambiar volumen (setter) de un acuario
                6) Demostraci칩n de peces (abstracta + interfaz)
                7) Salir
                Selecci칩n: 
                """.trimIndent()
            )

            when (readLine()?.trim()) {
                "1" -> crearAcuarioRect()
                "2" -> crearTorre()
                "3" -> crearPorPeces()
                "4" -> listar()
                "5" -> cambiarVolumen()
                "6" -> demoPeces()
                "7" -> {
                    println("Hasta luego 游녦")
                    return
                }
                else -> println("Opci칩n inv치lida")
            }
        }
    }

    private fun crearAcuarioRect() {
        val largo = leerEntero("Largo (cm): ")
        val ancho = leerEntero("Ancho (cm): ")
        val alto  = leerEntero("Alto (cm): ")

        val a = Acuario(largo = largo, ancho = ancho, alto = alto)
        acuarios += a
        println("Creado:")
        a.imprimirTamano()
    }

    private fun crearTorre() {
        val diametro = leerEntero("Di치metro (cm): ")
        val alto     = leerEntero("Alto (cm): ")

        val t = TanqueTorre(diametro = diametro, alto = alto)
        acuarios += t
        println("Creado:")
        t.imprimirTamano()
    }

    private fun crearPorPeces() {
        val n = leerEntero("N칰mero de peces: ")
        val a = Acuario(numeroDePeces = n)
        acuarios += a
        println("Creado con constructor secundario (por n췈 de peces):")
        a.imprimirTamano()
    }

    private fun listar() {
        if (acuarios.isEmpty()) {
            println("No hay acuarios a칰n.")
            return
        }
        acuarios.forEachIndexed { idx, a ->
            print("#${idx + 1} -> ")
            a.imprimirTamano()
        }
    }

    private fun cambiarVolumen() {
        if (acuarios.isEmpty()) {
            println("No hay acuarios para modificar.")
            return
        }
        listar()
        val idx = leerEntero("Seleccione 칤ndice de acuario (1..${acuarios.size}): ")
        val volumenNuevo = leerEntero("Nuevo volumen (litros): ")

        val i = idx - 1
        if (i !in acuarios.indices) {
            println("칈ndice inv치lido.")
            return
        }
        val a = acuarios[i]
        a.volumen = volumenNuevo 
        println("Actualizado:")
        a.imprimirTamano()
    }

    private fun demoPeces() {
        val tiburon = Tiburon()
        val payaso  = PezPayaso()
        println("Tibur칩n -> color: ${tiburon.color}")
        tiburon.comer()
        println("Pez Payaso -> color: ${payaso.color}")
        payaso.comer()
    }

    private fun leerEntero(prompt: String): Int {
        while (true) {
            print(prompt)
            val v = readLine()?.trim()
            val n = v?.toIntOrNull()
            if (n != null && n > 0) return n
            println("Ingrese un entero positivo.")
        }
    }
}

fun main() {
    ConsolaAcuarioApp().run()
}
